 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/

package ejemplocup;

/* Import the class java_cup.runtime.*  */

import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final. Agregamos el manejo de errores. */

parser code {:
    
    /* Reporte de error encontrado. */

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */

    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
			System.out.println("\n Análisis realizado con éxito!!");
            System.out.println("\n*** Fin de Análisis ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */

terminal           SEMI, OP_SUMA, OP_RESTA, OP_MULT, OP_DIV, POINT, PARENIZQ, PARENDER, IMP, ASIG, COMP, MOD, SUMEQ, RESTEQ, MULTEQ, DIVEQ, MODEQ, NOT, NOTEQ, AND, OR, KEYIZQ, KEYDER, CORIZQ, CORDER, MAYOR, MENOR, MAYOREQ, MENOREQ, POINTS, INC, DEC, INTROG, COMA, CLASS, PKG, RET, IF, ELSE, NULL, SUP, THIS, TRUE, FALSE, BOOL, CHR, INT, FLOT, DOUB, PUB, PRIV, PROT, STAT, FINL, NAT, SYN, ABST, THR, TRNS, ERROR;
terminal Integer   ENTERO;
terminal Double REAL;
terminal String ID, STR;
terminal Char CHAR;

/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */

non terminal Object compilation_unit, package_statement, import_statement, import_type, class_declaration, field_declaration, method_declaration, constructor_declaration, variable_declaration, many_variables, variable_initializer, many_values, parameter_list, statement_block, if_statement, expression, numeric_expression, incremental_left_operator, incremental_right_operator, assignment_operator, testing_expression, relational_operator, logical_expression, string_expression, concatenation, casting_expression, literal_expression, arglist, type_specifier, modifier, package_name, class_name;

/*
non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, termino;
*/
   

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Además indica si se asocia a izquierda o derecha.
*/

  /*precedence left OP_SUMA, OP_RESTA; 
  precedence left OP_MULT;*/


/* ------------------- Seccion de la gramatica ------------------------ */
   
/* La gramatica de nuestro analizador.
   
   expr_list ::=   expr_list expr_part
                 | expr_part
   expr_part ::=   expr SEMI
   expr      ::=   expr PLUS factor
                 | expr MINUS factor
                 | factor
   factor    ::=   factor TIMES term
                 | factor DIVIDE term
                 | term
   term     ::=    LPAREN expr RPAREN
                 | NUMBER
                 | ID     
*/
   
/* 'expr_list' es la raiz de la gramatica. Una 'expr_list' puede ser una 'expr_list'
   seguida de una expr_part, o puede ser una expr_part.
   Un terminal o no terminal se define <termino> ::= termino1 termino2 ... terminoN.;
   donde termino puede ser terminal o no terminal, solo se permite un simbolo a la
   izquierda. La | sirve para indicar que es una produccion u otra.
   Debemos pasar de simbolos no terminales a simbolos terminales. Una gramatica que no
   termina en simbolos terminales se dice que no reduce, y por lo tanto nunca se finaliza
   su procesado.
*/
   
/*
    expr_list ::= expr_list expr_part
                  |
                  expr_part
                  ;
*/

/* 'expr_part' se compone de una expr seguida de SEMI, o de una asign seguida de SEMI.
   asign:a esta estableciendo que a representa al objeto asociado a asign, entre {: :}
   se coloca el sodigo en java para las acciones a tomar al cumplirse una produccion.
*/
   
/*
   expr_part ::= expr SEMI 
				 |
				 error SEMI
				 ;
*/
                  
/* 'expr' puede ser una expresion que inicia por numero entero op_suma expr,
  de esa forma se realiza una suma. Tambien puede ser un numero entero, con esto
  se devuelve el valor del entero. En RESULT se almacena el valor de las acciones,
  y se pasa al siguiente nivel de la gramatica.
*/ 
             
/*
   expr      ::=  expr OP_SUMA factor                  
                  |
                  expr OP_RESTA factor               
                  |
                  factor           
                  ;

factor        ::=  factor OP_MULT termino                  
                  |
                  termino                  
                  ;

termino       ::=  PARENIZQ expr PARENDER                  
                  |
                  ENTERO 
                  |
                  ID
                  ; 
*/



compilation_unit ::= class_declaration | package_statement class_declaration | import_statement class_declaration;

package_statement ::= PKG package_name SEMI  ;

import_statement ::= IMP import_type SEMI ;

import_type ::= package_name POINT OP_MULT | class_name ;

class_declaration ::= modifier CLASS ID KEYIZQ field_declaration KEYDER  ;

field_declaration ::= method_declaration | constructor_declaration | variable_declaration | method_declaration field_declaration | constructor_declaration field_declaration | variable_declaration field_declaration ;

method_declaration ::= modifier type_specifier ID PARENIZQ parameter_list PARENDER KEYIZQ statement_block KEYDER |
                       type_specifier ID PARENIZQ PARENDER KEYIZQ KEYDER |
                       modifier type_specifier ID PARENIZQ PARENDER KEYIZQ KEYDER |
                       type_specifier ID PARENIZQ parameter_list PARENDER KEYIZQ KEYDER |
                       type_specifier ID PARENIZQ PARENDER KEYIZQ statement_block KEYDER |
                       modifier type_specifier ID PARENIZQ parameter_list PARENDER KEYIZQ KEYDER |
                       type_specifier ID PARENIZQ parameter_list PARENDER KEYIZQ statement_block KEYDER |
                       modifier type_specifier ID PARENIZQ PARENDER KEYIZQ statement_block KEYDER;
                       
constructor_declaration ::= ID PARENIZQ PARENDER KEYIZQ KEYDER |
                            modifier ID PARENIZQ PARENDER KEYIZQ KEYDER |
                            ID PARENIZQ PARENDER KEYIZQ KEYDER |
                            ID PARENIZQ parameter_list PARENDER KEYIZQ KEYDER |
                            ID PARENIZQ PARENDER KEYIZQ statement_block KEYDER |
                            modifier ID PARENIZQ parameter_list PARENDER KEYIZQ KEYDER |
                            ID PARENIZQ parameter_list PARENDER KEYIZQ statement_block KEYDER |
                            modifier ID PARENIZQ PARENDER KEYIZQ statement_block KEYDER |
                            modifier ID PARENIZQ parameter_list PARENDER KEYIZQ statement_block KEYDER ;

variable_declaration ::= modifier type_specifier many_variables SEMI | type_specifier many_variables SEMI ;

many_variables ::= ID |
                   ID ASIG variable_initializer |
                   ID COMA many_variables |
                   ID ASIG variable_initializer COMA many_variables;

variable_initializer ::= expression | KEYIZQ variable_initializer many_values KEYDER | KEYIZQ variable_initializer KEYDER;

many_values ::=  variable_initializer COMA many_values | variable_initializer;

parameter_list ::= type_specifier ID COMA parameter_list | type_specifier ID;

statement_block ::= variable_declaration | expression SEMI |  KEYIZQ statement_block KEYDER | if_statement | RET expression SEMI | RET SEMI;

if_statement ::= IF PARENIZQ expression PARENDER statement_block ELSE statement_block | IF PARENIZQ expression PARENDER statement_block ;

expression ::= numeric_expression | testing_expression | logical_expression | string_expression | casting_expression | literal_expression |  NULL | SUP | THIS | ID | PARENIZQ expression PARENDER |  expression PARENIZQ arglist PARENDER | expression PARENIZQ PARENDER | CORIZQ expression CORDER | COMA expression ;

numeric_expression ::= incremental_left_operator expression | expression incremental_right_operator | expression assignment_operator expression   ;

incremental_left_operator ::= OP_RESTA |  incremental_right_operator;

incremental_right_operator ::= INC | DEC;

assignment_operator ::= OP_SUMA |  SUMEQ |  OP_RESTA |  RESTEQ |  OP_MULT |  MULTEQ |  OP_DIV |  DIVEQ |  MOD |  MODEQ;

testing_expression ::= expression relational_operator expression  ;

relational_operator ::= MAYOR |  MENOR |  MAYOREQ |  MENOREQ |  COMP |  NOTEQ ;

logical_expression ::= NOT expression | expression INTROG expression POINTS expression |  TRUE |  FALSE   ;

string_expression ::=  expression concatenation expression  ;

concatenation ::=  OP_SUMA | SUMEQ ;

casting_expression ::= PARENIZQ type_specifier PARENDER expression ; 

literal_expression ::= ENTERO | REAL | STR | CHAR;
 
arglist ::= expression COMA arglist | expression;

type_specifier ::= BOOL| CHR | INT | FLOT | DOUB | class_name ;

modifier ::= PUB | PRIV | PROT | STAT | FINL | NAT | SYN |ABST | THR | TRNS;

package_name ::= ID | package_name POINT ID;

class_name ::= ID | package_name POINT ID;




/* falta poner no terminales, lista de palabras reservadas y manejo de errores, aparte de funcionar la GUI;
*/